//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `smarthome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Smarthome = _ModuleRegistry.module("Smarthome");

    Smarthome.SmarthomeException = class extends Ice.UserException
    {
        constructor(message = "", _cause = "")
        {
            super(_cause);
            this.message = message;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Smarthome::SmarthomeException";
        }

        _mostDerivedType()
        {
            return Smarthome.SmarthomeException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.message);
        }

        _readMemberImpl(istr)
        {
            this.message = istr.readString();
        }
    };

    Smarthome.InvalidDeviceStateException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::InvalidDeviceStateException";
        }

        _mostDerivedType()
        {
            return Smarthome.InvalidDeviceStateException;
        }
    };

    Smarthome.InvalidLightStripStateException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::InvalidLightStripStateException";
        }

        _mostDerivedType()
        {
            return Smarthome.InvalidLightStripStateException;
        }
    };

    Smarthome.InvalidLightBulbStateException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::InvalidLightBulbStateException";
        }

        _mostDerivedType()
        {
            return Smarthome.InvalidLightBulbStateException;
        }
    };

    Smarthome.InvalidDishwasherStateException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::InvalidDishwasherStateException";
        }

        _mostDerivedType()
        {
            return Smarthome.InvalidDishwasherStateException;
        }
    };

    const iceC_Smarthome_SmartHomeDeviceI_ids = [
        "::Ice::Object",
        "::Smarthome::SmartHomeDeviceI"
    ];

    Smarthome.SmartHomeDeviceI = class extends Ice.Object
    {
    };

    Smarthome.SmartHomeDeviceIPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Smarthome.SmartHomeDeviceI, Smarthome.SmartHomeDeviceIPrx, iceC_Smarthome_SmartHomeDeviceI_ids, 1,
    {
        "getState": [, 2, 2, , [1], , , , , ],
        "turnOn": [, 2, 2, , , , ,
        [
            Smarthome.InvalidDeviceStateException
        ], , ],
        "turnOff": [, 2, 2, , , , ,
        [
            Smarthome.InvalidDeviceStateException
        ], , ]
    });

    const iceC_Smarthome_SmartLightI_ids = [
        "::Ice::Object",
        "::Smarthome::SmartHomeDeviceI",
        "::Smarthome::SmartLightI"
    ];

    Smarthome.SmartLightI = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Smarthome.SmartHomeDeviceI
            ];
        }
    };

    Smarthome.SmartLightIPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Smarthome.SmartHomeDeviceIPrx];
        }
    };

    Slice.defineOperations(Smarthome.SmartLightI, Smarthome.SmartLightIPrx, iceC_Smarthome_SmartLightI_ids, 2,
    {
        "getPowerConsumption": [, 2, 2, , [3], , , , , ]
    });

    Smarthome.Pattern = Slice.defineEnum([
        ['PULSATING', 0], ['LIGHTNING', 1], ['FLASHING', 2], ['POLICE', 3], ['RANDOM', 4],
        ['CUSTOM', 5]]);

    Smarthome.Color = Slice.defineEnum([
        ['RED', 0], ['GREEN', 1], ['BLUE', 2]]);

    Smarthome.LightStripConfig = class
    {
        constructor(length = 0, pattern = Smarthome.Pattern.PULSATING, color = Smarthome.Color.RED)
        {
            this.length = length;
            this.pattern = pattern;
            this.color = color;
        }

        _write(ostr)
        {
            ostr.writeInt(this.length);
            Smarthome.Pattern._write(ostr, this.pattern);
            Smarthome.Color._write(ostr, this.color);
        }

        _read(istr)
        {
            this.length = istr.readInt();
            this.pattern = Smarthome.Pattern._read(istr);
            this.color = Smarthome.Color._read(istr);
        }

        static get minWireSize()
        {
            return  6;
        }
    };

    Slice.defineStruct(Smarthome.LightStripConfig, true, true);

    const iceC_Smarthome_SmartLightStripI_ids = [
        "::Ice::Object",
        "::Smarthome::SmartHomeDeviceI",
        "::Smarthome::SmartLightI",
        "::Smarthome::SmartLightStripI"
    ];

    Smarthome.SmartLightStripI = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Smarthome.SmartLightI
            ];
        }
    };

    Smarthome.SmartLightStripIPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Smarthome.SmartLightIPrx];
        }
    };

    Slice.defineOperations(Smarthome.SmartLightStripI, Smarthome.SmartLightStripIPrx, iceC_Smarthome_SmartLightStripI_ids, 3,
    {
        "setPattern": [, 2, 2, , , [[Smarthome.Pattern._helper]], ,
        [
            Smarthome.InvalidLightStripStateException
        ], , ],
        "setColor": [, 2, 2, , , [[Smarthome.Color._helper]], ,
        [
            Smarthome.InvalidLightStripStateException
        ], , ],
        "getConfig": [, 2, 2, , [Smarthome.LightStripConfig], , ,
        [
            Smarthome.InvalidLightStripStateException
        ], , ]
    });

    Smarthome.DiodeType = Slice.defineEnum([
        ['LED', 0], ['UV', 1], ['PLASMA', 2], ['PIN', 3], ['LASER', 4]]);

    Smarthome.BulbConfig = class
    {
        constructor(color = Smarthome.Color.RED, type = Smarthome.DiodeType.LED)
        {
            this.color = color;
            this.type = type;
        }

        _write(ostr)
        {
            Smarthome.Color._write(ostr, this.color);
            Smarthome.DiodeType._write(ostr, this.type);
        }

        _read(istr)
        {
            this.color = Smarthome.Color._read(istr);
            this.type = Smarthome.DiodeType._read(istr);
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(Smarthome.BulbConfig, true, true);

    const iceC_Smarthome_SmartBulbI_ids = [
        "::Ice::Object",
        "::Smarthome::SmartBulbI",
        "::Smarthome::SmartHomeDeviceI",
        "::Smarthome::SmartLightI"
    ];

    Smarthome.SmartBulbI = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Smarthome.SmartLightI
            ];
        }
    };

    Smarthome.SmartBulbIPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Smarthome.SmartLightIPrx];
        }
    };

    Slice.defineOperations(Smarthome.SmartBulbI, Smarthome.SmartBulbIPrx, iceC_Smarthome_SmartBulbI_ids, 1,
    {
        "getConfig": [, 2, 2, , [Smarthome.BulbConfig], , ,
        [
            Smarthome.InvalidLightBulbStateException
        ], , ],
        "setColor": [, 2, 2, , , [[Smarthome.Color._helper]], ,
        [
            Smarthome.InvalidLightBulbStateException
        ], , ],
        "setDiodeType": [, 2, 2, , , [[Smarthome.DiodeType._helper]], ,
        [
            Smarthome.InvalidLightBulbStateException
        ], , ]
    });

    Smarthome.Program = Slice.defineEnum([
        ['ECO', 0], ['NORMAL', 1], ['INTENSIVE', 2], ['GLASS', 3], ['QUICK', 4],
        ['CUSTOM', 5]]);

    Smarthome.ProgramConfig = class
    {
        constructor(program = Smarthome.Program.ECO, temperature = 0, duration = 0)
        {
            this.program = program;
            this.temperature = temperature;
            this.duration = duration;
        }

        _write(ostr)
        {
            Smarthome.Program._write(ostr, this.program);
            ostr.writeInt(this.temperature);
            ostr.writeInt(this.duration);
        }

        _read(istr)
        {
            this.program = Smarthome.Program._read(istr);
            this.temperature = istr.readInt();
            this.duration = istr.readInt();
        }

        static get minWireSize()
        {
            return  9;
        }
    };

    Slice.defineStruct(Smarthome.ProgramConfig, true, true);

    Slice.defineSequence(Smarthome, "ProgramListHelper", "Smarthome.Program._helper", false);

    const iceC_Smarthome_SmartDishwasherI_ids = [
        "::Ice::Object",
        "::Smarthome::SmartDishwasherI",
        "::Smarthome::SmartHomeDeviceI"
    ];

    Smarthome.SmartDishwasherI = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Smarthome.SmartHomeDeviceI
            ];
        }
    };

    Smarthome.SmartDishwasherIPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Smarthome.SmartHomeDeviceIPrx];
        }
    };

    Slice.defineOperations(Smarthome.SmartDishwasherI, Smarthome.SmartDishwasherIPrx, iceC_Smarthome_SmartDishwasherI_ids, 1,
    {
        "startWashing": [, 2, 2, , , , ,
        [
            Smarthome.InvalidDishwasherStateException
        ], , ],
        "stopWashing": [, 2, 2, , , , ,
        [
            Smarthome.InvalidDishwasherStateException
        ], , ],
        "isWashing": [, 2, 2, , [1], , ,
        [
            Smarthome.InvalidDishwasherStateException
        ], , ],
        "setConfig": [, 2, 2, , , [[Smarthome.ProgramConfig]], ,
        [
            Smarthome.InvalidDishwasherStateException
        ], , ],
        "getProgramConfig": [, 2, 2, , [Smarthome.ProgramConfig], , ,
        [
            Smarthome.InvalidDishwasherStateException
        ], , ],
        "getProgramList": [, 2, 2, , ["Smarthome.ProgramListHelper"], , , , , ]
    });

    Smarthome.DeviceInfo = class
    {
        constructor(name = "", type = "", server = 0)
        {
            this.name = name;
            this.type = type;
            this.server = server;
        }

        _write(ostr)
        {
            ostr.writeString(this.name);
            ostr.writeString(this.type);
            ostr.writeInt(this.server);
        }

        _read(istr)
        {
            this.name = istr.readString();
            this.type = istr.readString();
            this.server = istr.readInt();
        }

        static get minWireSize()
        {
            return  6;
        }
    };

    Slice.defineStruct(Smarthome.DeviceInfo, true, true);

    Slice.defineSequence(Smarthome, "DeviceInfoListHelper", "Smarthome.DeviceInfo", false);

    const iceC_Smarthome_DeviceManagerI_ids = [
        "::Ice::Object",
        "::Smarthome::DeviceManagerI"
    ];

    Smarthome.DeviceManagerI = class extends Ice.Object
    {
    };

    Smarthome.DeviceManagerIPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Smarthome.DeviceManagerI, Smarthome.DeviceManagerIPrx, iceC_Smarthome_DeviceManagerI_ids, 1,
    {
        "getDevices": [, 2, 2, , ["Smarthome.DeviceInfoListHelper"], , , , , ]
    });
    exports.Smarthome = Smarthome;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
